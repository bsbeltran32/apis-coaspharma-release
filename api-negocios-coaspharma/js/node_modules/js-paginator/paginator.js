/*!
 * PaginatorJS 0.0.3
 * http://mobius.ovh/
 *
 * Released under the MIT license
 */
(function(root) {
    "use strict";
    var win = window,
        doc = document,
        body = doc.body;

    /**
     * Default configuration
     * @typ {Object}
     */
    var defaultConfig = {
        limit: 0,
        offset: 2,
        startPage: 1,
        hideDisabled: true,
        prevNext: true,
        prevText: "&lsaquo;",
        nextText: "&rsaquo;",
        firstLast: false,
        firstText: "&laquo;",
        lastText: "&raquo;",
        ellipsisText: "&hellip;",
        hashString: "#",

        classes: {
            pager: "pg-pager",
            item: "pg-item",
            link: "pg-link",
            prev: "pg-prev",
            next: "pg-next",
            first: "pg-first",
            last: "pg-last",
            active: "pg-active",
            disabled: "pg-disabled",
            ellipsis: "pg-ellipsis"
        }
    };

    /**
     * Check item is object
     * @return {Boolean}
     */
    var isObject = function(o) {
        return Object.prototype.toString.call(o) === "[object Object]";
    };

    /**
     * Get the closest matching ancestor
     * @param  {Object}   el         The starting node.
     * @param  {Function} fn         Callback to find matching ancestor.
     * @return {Object|Boolean}      Returns the matching ancestor or false in not found.
     */
    var closest = function(el, fn) {
        return el && el !== body && (fn(el) ? el : closest(el.parentNode, fn));
    };

    /**
     * Merge objects (reccursive)
     * @param  {Object} src   Source object.
     * @param  {Object} props Object to merge into source.
     * @return {Object}       merged object.
     */
    var extend = function(src, props) {
        for (var prop in props) {
            if (props.hasOwnProperty(prop)) {
                var val = props[prop];
                if (val && isObject(val)) {
                    src[prop] = src[prop] || {};
                    extend(src[prop], val);
                } else {
                    src[prop] = val;
                }
            }
        }
        return src;
    };

    /**
     * Iterator helper
     * @param  {(Array|Object|Number)}   arr     Any number, object, array or array-like collection.
     * @param  {Function}         fn             Callback
     * @param  {Object}           scope          Change the value of this
     * @return {Void}
     */
    var each = function(arr, fn, scope) {
        var n;
        if (!isNaN(arr)) {
            for (n = 0; n < arr; n++) {
                fn.call(scope, n + 1, n);
            }
        } else {
            if (isObject(arr)) {
                for (n in arr) {
                    if (Object.prototype.hasOwnProperty.call(arr, n)) {
                        fn.call(scope, arr[n], n);
                    }
                }
            } else {
                for (n = 0; n < arr.length; n++) {
                    fn.call(scope, arr[n], n);
                }
            }
        }
    };

    /**
     * Add event listener to target
     * @param  {Object} el
     * @param  {String} e
     * @param  {Function} fn
     */
    var on = function(el, e, fn) {
        el.addEventListener(e, fn, false);
    };

    /**
     * Create DOM element node
     * @param  {String}   a nodeName
     * @param  {Object}   b properties and attributes
     * @return {Object}
     */
    var createNode = function(a, b) {
        var d = doc.createElement(a);
        if (b && "object" == typeof b) {
            var e;
            for (e in b) {
                if ("html" === e) {
                    d.innerHTML = b[e];
                } else {
                    d.setAttribute(e, b[e]);
                }
            }
        }
        return d;
    };

    /**
     * Main lib
     * @param {Object} config
     */
    var Pager = function(config) {
        this.config = extend(defaultConfig, config);

        this.container = this.config.container;

        if (typeof this.container === "string") {
            this.container = document.querySelector(this.container);
        }

        if (this.config.pages) {
            this.totalPages = this.config.pages;
        }

        this.limit = this.config.limit;
        this.offset = this.config.offset;
        this.hideDisabled = this.config.hideDisabled;

        this.bindEvents();

        if (this.config.startPage) {
            this.page(this.config.startPage);
        }

        var that = this;
        setTimeout(function() {
            that.emit("init", that.currentPage);
        }, 10);
    };

    /**
     * Bind events to the DOM
     * @return {Void}
     */
    Pager.prototype.bindEvents = function() {

        this.events = {
            click: this.click.bind(this)
        };

        on(this.container, "click", this.events.click);
    };

    /**
     * Click eventListener callback
     * @param  {Object} e Event
     * @return {Void}
     */
    Pager.prototype.click = function(e) {
        var that = this,
            target = e.target,
            o = that.config;

        var item = closest(target, function(node) {
            return node.item && !item.ellipsis;
        });

        if (item) {
            e.preventDefault();


            that.page(parseInt(item.dataset.page, 10))
        }
    };

    /**
     * Render the links
     * @param  {Number} pages The number of links to render
     * @return {Object}
     */
    Pager.prototype.render = function(pages) {

        var that = this,
            o = that.config,
            node = document.createDocumentFragment();

        if (pages) {
            that.items = [];
            that.totalPages = pages;

            if (that.currentPage > that.totalPages) {
                that.currentPage = that.totalPages;
            }
        }

        if (that.pager) {
            that.pager.className = o.classes.pager;
        } else {
            that.pager = createNode("ul", {
                class: o.classes.pager
            });
        }

        var items = that.truncate();

        if (that.hideDisabled && that.currentPage === 1) {} else {

            if (o.firstLast) {
                that.first = that.renderButton({
                    class: o.classes.first,
                    content: o.firstText,
                    page: 1,
                    nav: true,
                    first: true
                });

                node.appendChild(that.first);
            }

            if (o.prevNext) {
                that.prev = that.renderButton({
                    class: o.classes.prev,
                    content: o.prevText,
                    page: that.currentPage > 1 ? that.currentPage - 1 : 1,
                    nav: true,
                    prev: true
                });

                node.appendChild(that.prev);
            }
        }

        each(items, function(item, i) {
            node.appendChild(item);
        });

        if (that.hideDisabled && that.currentPage === that.totalPages) {} else {
            if (o.prevNext) {
                that.next = that.renderButton({
                    class: o.classes.next,
                    content: o.nextText,
                    page: that.currentPage < that.totalPages ? that.currentPage + 1 : that.totalPages,
                    nav: true,
                    next: true
                });

                node.appendChild(that.next);
            }

            if (o.firstLast) {
                that.last = that.renderButton({
                    class: o.classes.last,
                    content: o.lastText,
                    page: that.totalPages,
                    nav: true,
                    last: true
                });

                node.appendChild(that.last);
            }
        }

        that.pager.innerHTML = "";
        that.pager.appendChild(node);

        that.container.appendChild(that.pager);

        that.emit("render");

        return this;
    };

    /**
     * Render a button
     * @param  {Obejct} obj
     * @return {Object}
     */
    Pager.prototype.renderButton = function(obj) {
        var that = this,
            o = that.config;

        var item = createNode("li", {
            class: o.classes.item
        });

        item.dataset.page = obj.page;

        if (obj.page === that.currentPage && !obj.ellipsis && !obj.nav) {
            item.classList.add(o.classes.active);
        }

        var link = createNode(obj.ellipsis ? "span" : "a", {
            class: !obj.ellipsis ? o.classes.link : "",
            html: obj.content
        });

        if (obj.class) {
            item.classList.add(obj.class);
        }

        if (obj.nav) {
            item.nav = true;
        }

        if (obj.ellipsis) {
            item.ellipsis = true;
        } else {
            item.item = true;
            link.href = o.hashString.replace("{page}", obj.page).replace("{pages}", that.totalPages);
        }

        if ((obj.prev || obj.first) && that.currentPage === 1 ||
            (obj.next || obj.last) && that.currentPage === that.totalPages) {
            item.disabled = true;
            item.classList.add(o.classes.disabled);

            link.tabIndex = -1;
        } else {
            item.disabled = false;
        }

        item.appendChild(link);

        return item;
    };

    /**
     * Go to a page.
     * @param  {Number} page Th page number.
     * @return {Void}
     */
    Pager.prototype.page = function(page) {

        var that = this,
            o = that.config;

        if (o.ajax) {

            o.ajax.data = o.ajax.data || {}

            o.ajax.data[o.ajax.param || "page"] = page;

            // https://stackoverflow.com/questions/316781/how-to-build-query-string-with-javascript/34209399#34209399
            var e = encodeURIComponent;
            var query = Object.keys(o.ajax.data)
                .map(function(k) {
                    e(k) + '=' + e(o.ajax.data[k])
                })
                .join('&');

            var request = new Request(o.ajax.url + "?" + query, {
                method: "GET",
                headers: new Headers()
            });

            if (typeof o.ajax.before === "function") {
                o.ajax.before.call(that, data);
            }

            fetch(request).then(function(response) {
                    return response.json();
                })
                .then(function(data) {

                    that.currentPage = page;

                    if (typeof o.ajax.success === "function") {
                        o.ajax.success.call(that, data);
                    }

                    that.render();

                    that.emit("change", page);
                });
        } else {

            that.currentPage = page;
            that.render();

            that.emit("change", page);
        }
    };

    /**
     * Truncate the links
     * @return {Array}
     */
    Pager.prototype.truncate = function() {

        var that = this,
            delta = that.offset * 2,
            left = that.currentPage - that.offset,
            right = that.currentPage + that.offset,
            range = [],
            pager = [],
            n;

        // No need to truncate if the number of pages is low
        if (!that.limit || that.totalPages <= that.limit) {
            each(that.totalPages, function(index) {
                pager.push(that.renderButton({
                    page: index,
                    content: index
                }));
            });
        } else {
            if (that.currentPage < (4 - that.offset) + delta) {
                right = 3 + delta;
            } else if (that.currentPage > that.totalPages - ((3 - that.offset) + delta)) {
                left = that.totalPages - (2 + delta);
            }

            // Get the links that will be visible
            for (var i = 1; i <= that.totalPages; i++) {
                if (i == 1 || i == that.totalPages || i >= left && i <= right) {
                    range.push(i);
                }
            }

            each(range, function(index) {
                if (n) {
                    if (index - n == 2) {
                        pager.push(that.renderButton({
                            page: n + 1,
                            content: n + 1
                        }));
                    } else if (index - n != 1) {
                        // Create ellipsis node
                        pager.push(that.renderButton({
                            class: that.config.classes.ellipsis,
                            content: that.config.ellipsisText,
                            ellipsis: true
                        }));
                    }
                }

                pager.push(that.renderButton({
                    page: index,
                    content: index
                }));
                n = index;
            });
        }

        return pager;
    };

    /**
     * Add custom event listener
     * @param  {String} event
     * @param  {Function} callback
     * @return {Void}
     */
    Pager.prototype.on = function(event, fn) {
        this.events[event] = this.events[event] || [];
        this.events[event].push(fn);
    };

    /**
     * Remove custom event listener
     * @param  {String} event
     * @param  {Function} callback
     * @return {Void}
     */
    Pager.prototype.off = function(event, fn) {
        if (event in this.events === false) return;
        this.events[event].splice(this.events[event].indexOf(fn), 1);
    };

    /**
     * Fire custom event
     * @param  {String} event
     * @return {Void}
     */
    Pager.prototype.emit = function(event) {
        if (event in this.events === false) return;
        for (var i = 0; i < this.events[event].length; i++) {
            this.events[event][i].apply(this, [].slice.call(arguments, 1));
        }
    };

    root.Paginator = Pager;
})(this);